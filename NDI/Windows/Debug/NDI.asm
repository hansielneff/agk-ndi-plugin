; Listing generated by Microsoft (R) Optimizing Compiler Version 19.31.31104.0 

	TITLE	C:\Users\hansi\Downloads\NDI\Windows\Debug\NDI.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?NDIFinder@@3PAUNDIlib_find_instance_type@@A	; NDIFinder
PUBLIC	?NDIReceiver@@3PAUNDIlib_recv_instance_type@@A	; NDIReceiver
PUBLIC	?NDISender@@3PAUNDIlib_send_instance_type@@A	; NDISender
PUBLIC	?sourceCount@@3IA				; sourceCount
PUBLIC	?sourcesArray@@3PAPADA				; sourcesArray
_BSS	SEGMENT
?NDIFinder@@3PAUNDIlib_find_instance_type@@A DD 01H DUP (?) ; NDIFinder
?NDIReceiver@@3PAUNDIlib_recv_instance_type@@A DD 01H DUP (?) ; NDIReceiver
?NDISender@@3PAUNDIlib_send_instance_type@@A DD 01H DUP (?) ; NDISender
?sourceCount@@3IA DD 01H DUP (?)			; sourceCount
?sourcesArray@@3PAPADA DD 01H DUP (?)			; sourcesArray
_BSS	ENDS
msvcjmc	SEGMENT
__D0DFFAC6_winpackagefamily@h DB 01H
__D0D0F397_winapifamily@h DB 01H
__94A3FDDD_sdkddkver@h DB 01H
__F32AA0BD_concurrencysal@h DB 01H
__5A3A63C4_sal@h DB 01H
__6BEC7B3D_vadefs@h DB 01H
__1BC54112_vcruntime@h DB 01H
__AF2AD727_excpt@h DB 01H
__273EAB94_stdarg@h DB 01H
__1C9F390F_specstrings_undef@h DB 01H
__36A21E95_specstrings_strict@h DB 01H
__452FE810_sdv_driverspecs@h DB 01H
__30F344B3_driverspecs@h DB 01H
__BD886E18_specstrings@h DB 01H
__6569C2CA_corecrt@h DB 01H
__5DB64B66_corecrt_wctype@h DB 01H
__B2D2BA86_ctype@h DB 01H
__BF9C347F_kernelspecs@h DB 01H
__79C7FC57_basetsd@h DB 01H
__CDDAF8CA_errno@h DB 01H
__4041E9ED_vcruntime_string@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__D545DD43_guiddef@h DB 01H
__DF4F952E_pshpack4@h DB 01H
__7FCD0577_poppack@h DB 01H
__DBC2E99C_pshpack2@h DB 01H
__D6556C4A_pshpack8@h DB 01H
__D98457C5_pshpack1@h DB 01H
__614C4572_apiset@h DB 01H
__8500295D_ktmtypes@h DB 01H
__D5DDFBF3_winnt@h DB 01H
__156BD51A_minwindef@h DB 01H
__F9B9A8F7_windef@h DB 01H
__BD2C4590_apisetcconv@h DB 01H
__18251742_minwinbase@h DB 01H
__23611203_apiquery2@h DB 01H
__C914CD48_processenv@h DB 01H
__996311FD_fileapi@h DB 01H
__41AEF397_fileapifromapp@h DB 01H
__65579FF3_debugapi@h DB 01H
__476FCB5A_utilapiset@h DB 01H
__089D2E42_handleapi@h DB 01H
__B16F04F5_errhandlingapi@h DB 01H
__81CCB02F_fibersapi@h DB 01H
__A9B4C5F0_namedpipeapi@h DB 01H
__C209F2C8_profileapi@h DB 01H
__34C22DC8_heapapi@h DB 01H
__8A238485_ioapiset@h DB 01H
__4826BA69_synchapi@h DB 01H
__6A31599C_interlockedapi@h DB 01H
__439612F0_processthreadsapi@h DB 01H
__7BB37CFA_sysinfoapi@h DB 01H
__5733279A_memoryapi@h DB 01H
__6D078C0D_enclaveapi@h DB 01H
__3663CE50_threadpoollegacyapiset@h DB 01H
__E16717D9_threadpoolapiset@h DB 01H
__4A6035CC_jobapi@h DB 01H
__62EEB553_jobapi2@h DB 01H
__9F22E7EF_wow64apiset@h DB 01H
__E86B4A9A_libloaderapi@h DB 01H
__EB536E54_securitybaseapi@h DB 01H
__E915C287_namespaceapi@h DB 01H
__C66F44F2_systemtopologyapi@h DB 01H
__B6175B28_processtopologyapi@h DB 01H
__9E4AD838_securityappcontainer@h DB 01H
__F599FDAE_realtimeapiset@h DB 01H
__D4435474_winerror@h DB 01H
__F94F31E6_timezoneapi@h DB 01H
__B3ED30D4_winbase@h DB 01H
__E9F7D11F_wingdi@h DB 01H
__AC21C382_tvout@h DB 01H
__DB057BA3_winuser@h DB 01H
__A1BAD304_datetimeapi@h DB 01H
__30E2BD27_winnls@h DB 01H
__B7FF4B97_stringapiset@h DB 01H
__66C87297_wincontypes@h DB 01H
__1317218F_consoleapi@h DB 01H
__8D62D26D_consoleapi2@h DB 01H
__8CA0B85A_consoleapi3@h DB 01H
__CE39E65B_wincon@h DB 01H
__F6801ACC_verrsrc@h DB 01H
__1CB844D9_winver@h DB 01H
__D0CFA71C_reason@h DB 01H
__F3D58382_winreg@h DB 01H
__34C28572_wnnc@h DB 01H
__0617DE59_winnetwk@h DB 01H
__A118E6DC_stralign@h DB 01H
__8B10FA9F_winsvc@h DB 01H
__BEDBF511_mcx@h DB 01H
__D3BCC989_ime_cmodes@h DB 01H
__B1694579_imm@h DB 01H
__4D4D253D_windows@h DB 01H
__6C20D4D3_corecrt_malloc@h DB 01H
__C9393812_stddef@h DB 01H
__D493B9BD_corecrt_search@h DB 01H
__1473E23E_corecrt_wstdlib@h DB 01H
__AD973B64_limits@h DB 01H
__B49664B7_stdlib@h DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__E5B9A0F7_AGKLibraryCommands@h DB 01H
__13E1155B_stdint@h DB 01H
__5EA051B5_Processing@NDI@compat@h DB 01H
__0CF11AA0_Processing@NDI@structs@h DB 01H
__AB9C67C1_Processing@NDI@Find@h DB 01H
__1BE3658E_Processing@NDI@Recv@h DB 01H
__2AC41BC2_Processing@NDI@Recv@ex@h DB 01H
__3D7719E8_Processing@NDI@Send@h DB 01H
__D86AE8E0_Processing@NDI@Routing@h DB 01H
__6C99D60B_Processing@NDI@utilities@h DB 01H
__79F243EB_Processing@NDI@deprecated@h DB 01H
__D1B3C5DE_Processing@NDI@FrameSync@h DB 01H
__0D533C48_Processing@NDI@DynamicLoad@h DB 01H
__B6DA9BDA_Processing@NDI@Lib@cplusplus@h DB 01H
__9BD93AA8_Processing@NDI@Lib@h DB 01H
__9A1ABAE0_NDI@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?CreateString@agk@@SAPADI@Z			; agk::CreateString
PUBLIC	?Sync@agk@@SAXXZ				; agk::Sync
PUBLIC	?GetImageWidth@agk@@SAMI@Z			; agk::GetImageWidth
PUBLIC	?GetImageHeight@agk@@SAMI@Z			; agk::GetImageHeight
PUBLIC	?Print@agk@@SAXPBD@Z				; agk::Print
PUBLIC	?CreateMemblock@agk@@SAII@Z			; agk::CreateMemblock
PUBLIC	?DeleteMemblock@agk@@SAXI@Z			; agk::DeleteMemblock
PUBLIC	?GetMemblockSize@agk@@SAHI@Z			; agk::GetMemblockSize
PUBLIC	?SetMemblockInt@agk@@SAXIIH@Z			; agk::SetMemblockInt
PUBLIC	?CreateMemblockFromImage@agk@@SAII@Z		; agk::CreateMemblockFromImage
PUBLIC	?CreateImageFromMemblock@agk@@SAXII@Z		; agk::CreateImageFromMemblock
PUBLIC	?GetMemblockPtr@agk@@SAPAEI@Z			; agk::GetMemblockPtr
PUBLIC	??0NDIlib_source_t@@QAE@PBD0@Z			; NDIlib_source_t::NDIlib_source_t
PUBLIC	??0NDIlib_video_frame_v2_t@@QAE@HHW4NDIlib_FourCC_video_type_e@@HHMW4NDIlib_frame_format_type_e@@_JPAEHPBD2@Z ; NDIlib_video_frame_v2_t::NDIlib_video_frame_v2_t
PUBLIC	??0NDIlib_audio_frame_v3_t@@QAE@HHH_JW4NDIlib_FourCC_audio_type_e@@PAEHPBD0@Z ; NDIlib_audio_frame_v3_t::NDIlib_audio_frame_v3_t
PUBLIC	??0NDIlib_recv_create_v3_t@@QAE@UNDIlib_source_t@@W4NDIlib_recv_color_format_e@@W4NDIlib_recv_bandwidth_e@@_NPBD@Z ; NDIlib_recv_create_v3_t::NDIlib_recv_create_v3_t
PUBLIC	_Initialize
PUBLIC	_Uninitialize
PUBLIC	_CreateFinder
PUBLIC	_DeleteFinder
PUBLIC	_FindSources
PUBLIC	_CreateReceiver
PUBLIC	_DeleteReceiver
PUBLIC	_ConnectReceiver
PUBLIC	_ReceiveFrame
PUBLIC	_CreateSender
PUBLIC	_DeleteSender
PUBLIC	_SendFrame
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0BL@DBAPPLAG@Incompatible?5data?5received@ ; `string'
PUBLIC	??_C@_0DB@KBMCLNJB@Trying?5to?5receive?5data?5produced@ ; `string'
EXTRN	_memcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_malloc:PROC
EXTRN	__imp__NDIlib_initialize:PROC
EXTRN	__imp__NDIlib_destroy:PROC
EXTRN	__imp__NDIlib_find_create_v2:PROC
EXTRN	__imp__NDIlib_find_destroy:PROC
EXTRN	__imp__NDIlib_find_get_current_sources:PROC
EXTRN	__imp__NDIlib_find_wait_for_sources:PROC
EXTRN	__imp__NDIlib_recv_create_v3:PROC
EXTRN	__imp__NDIlib_recv_destroy:PROC
EXTRN	__imp__NDIlib_recv_connect:PROC
EXTRN	__imp__NDIlib_recv_capture_v3:PROC
EXTRN	__imp__NDIlib_recv_free_video_v2:PROC
EXTRN	__imp__NDIlib_recv_free_audio_v3:PROC
EXTRN	__imp__NDIlib_send_create:PROC
EXTRN	__imp__NDIlib_send_destroy:PROC
EXTRN	__imp__NDIlib_send_send_video_v2:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	?AGKCommand0@@3P6APADI@ZA:DWORD			; AGKCommand0
EXTRN	?AGKCommand41@@3P6AXXZA:DWORD			; AGKCommand41
EXTRN	?AGKCommand105@@3P6AMI@ZA:DWORD			; AGKCommand105
EXTRN	?AGKCommand106@@3P6AMI@ZA:DWORD			; AGKCommand106
EXTRN	?AGKCommand462@@3P6AXPBD@ZA:DWORD		; AGKCommand462
EXTRN	?AGKCommand1168@@3P6AII@ZA:DWORD		; AGKCommand1168
EXTRN	?AGKCommand1171@@3P6AXI@ZA:DWORD		; AGKCommand1171
EXTRN	?AGKCommand1173@@3P6AHI@ZA:DWORD		; AGKCommand1173
EXTRN	?AGKCommand1183@@3P6AXIIH@ZA:DWORD		; AGKCommand1183
EXTRN	?AGKCommand1187@@3P6AII@ZA:DWORD		; AGKCommand1187
EXTRN	?AGKCommand1188@@3P6AXII@ZA:DWORD		; AGKCommand1188
EXTRN	?AGKCommand1832@@3P6APAEI@ZA:DWORD		; AGKCommand1832
EXTRN	__fltused:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0DB@KBMCLNJB@Trying?5to?5receive?5data?5produced@
CONST	SEGMENT
??_C@_0DB@KBMCLNJB@Trying?5to?5receive?5data?5produced@ DB 'Trying to rec'
	DB	'eive data produced an unknown error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DBAPPLAG@Incompatible?5data?5received@
CONST	SEGMENT
??_C@_0BL@DBAPPLAG@Incompatible?5data?5received@ DB 'Incompatible data re'
	DB	'ceived', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Windows\NDI.cpp
;	COMDAT _SendFrame
_TEXT	SEGMENT
_NDIFrame$ = -128					; size = 64
_dataSize$ = -56					; size = 4
_dataOffset$ = -44					; size = 4
_memblock$ = -32					; size = 4
_imageHeight$ = -20					; size = 4
_imageWidth$ = -8					; size = 4
_imageID$ = 8						; size = 4
_SendFrame PROC						; COMDAT

; 160  : extern "C" DLL_EXPORT void SendFrame(int imageID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-132]
	mov	ecx, 33					; 00000021H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9A1ABAE0_NDI@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 161  :     if (!NDISender) return;

	cmp	DWORD PTR ?NDISender@@3PAUNDIlib_send_instance_type@@A, 0 ; NDISender
	jne	SHORT $LN2@SendFrame
	jmp	$LN1@SendFrame
$LN2@SendFrame:

; 162  : 
; 163  :     int imageWidth = (int) agk::GetImageWidth(imageID);

	mov	eax, DWORD PTR _imageID$[ebp]
	push	eax
	call	?GetImageWidth@agk@@SAMI@Z		; agk::GetImageWidth
	add	esp, 4
	call	__ftol2_sse
	mov	DWORD PTR _imageWidth$[ebp], eax

; 164  :     int imageHeight = (int) agk::GetImageHeight(imageID);

	mov	eax, DWORD PTR _imageID$[ebp]
	push	eax
	call	?GetImageHeight@agk@@SAMI@Z		; agk::GetImageHeight
	add	esp, 4
	call	__ftol2_sse
	mov	DWORD PTR _imageHeight$[ebp], eax

; 165  :     int memblock = agk::CreateMemblockFromImage(imageID);

	mov	eax, DWORD PTR _imageID$[ebp]
	push	eax
	call	?CreateMemblockFromImage@agk@@SAII@Z	; agk::CreateMemblockFromImage
	add	esp, 4
	mov	DWORD PTR _memblock$[ebp], eax

; 166  :     int dataOffset = 12;

	mov	DWORD PTR _dataOffset$[ebp], 12		; 0000000cH

; 167  :     int dataSize = agk::GetMemblockSize(memblock) - dataOffset;

	mov	eax, DWORD PTR _memblock$[ebp]
	push	eax
	call	?GetMemblockSize@agk@@SAHI@Z		; agk::GetMemblockSize
	add	esp, 4
	sub	eax, DWORD PTR _dataOffset$[ebp]
	mov	DWORD PTR _dataSize$[ebp], eax

; 168  : 
; 169  :     // Create NDI frame and set p_data to point to the AGK image data
; 170  :     NDIlib_video_frame_v2_t NDIFrame;

	push	0
	push	0
	push	0
	push	0
	push	0
	push	2147483647				; 7fffffffH
	push	-1
	push	1
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	1001					; 000003e9H
	push	30000					; 00007530H
	push	1498831189				; 59565955H
	push	0
	push	0
	lea	ecx, DWORD PTR _NDIFrame$[ebp]
	call	??0NDIlib_video_frame_v2_t@@QAE@HHW4NDIlib_FourCC_video_type_e@@HHMW4NDIlib_frame_format_type_e@@_JPAEHPBD2@Z ; NDIlib_video_frame_v2_t::NDIlib_video_frame_v2_t

; 171  :     NDIFrame.xres = imageWidth;

	mov	eax, DWORD PTR _imageWidth$[ebp]
	mov	DWORD PTR _NDIFrame$[ebp], eax

; 172  :     NDIFrame.yres = imageHeight;

	mov	eax, DWORD PTR _imageHeight$[ebp]
	mov	DWORD PTR _NDIFrame$[ebp+4], eax

; 173  :     NDIFrame.FourCC = NDIlib_FourCC_type_RGBA;

	mov	DWORD PTR _NDIFrame$[ebp+8], 1094862674	; 41424752H

; 174  :     NDIFrame.p_data = (uint8_t*)(agk::GetMemblockPtr(memblock) + dataOffset);

	mov	eax, DWORD PTR _memblock$[ebp]
	push	eax
	call	?GetMemblockPtr@agk@@SAPAEI@Z		; agk::GetMemblockPtr
	add	esp, 4
	add	eax, DWORD PTR _dataOffset$[ebp]
	mov	DWORD PTR _NDIFrame$[ebp+40], eax

; 175  : 
; 176  :     NDIlib_send_send_video_v2(NDISender, &NDIFrame);

	mov	esi, esp
	lea	eax, DWORD PTR _NDIFrame$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?NDISender@@3PAUNDIlib_send_instance_type@@A ; NDISender
	push	ecx
	call	DWORD PTR __imp__NDIlib_send_send_video_v2
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 177  :     agk::DeleteMemblock(memblock);

	mov	eax, DWORD PTR _memblock$[ebp]
	push	eax
	call	?DeleteMemblock@agk@@SAXI@Z		; agk::DeleteMemblock
	add	esp, 4
$LN1@SendFrame:

; 178  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SendFrame
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@SendFrame:
	DD	1
	DD	$LN5@SendFrame
$LN5@SendFrame:
	DD	-128					; ffffff80H
	DD	64					; 00000040H
	DD	$LN4@SendFrame
$LN4@SendFrame:
	DB	78					; 0000004eH
	DB	68					; 00000044H
	DB	73					; 00000049H
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_SendFrame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Windows\NDI.cpp
;	COMDAT _DeleteSender
_TEXT	SEGMENT
_DeleteSender PROC					; COMDAT

; 154  : extern "C" DLL_EXPORT void DeleteSender() {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9A1ABAE0_NDI@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 155  :     if (!NDISender) return;

	cmp	DWORD PTR ?NDISender@@3PAUNDIlib_send_instance_type@@A, 0 ; NDISender
	jne	SHORT $LN2@DeleteSend
	jmp	SHORT $LN1@DeleteSend
$LN2@DeleteSend:

; 156  :     NDIlib_send_destroy(NDISender);

	mov	esi, esp
	mov	eax, DWORD PTR ?NDISender@@3PAUNDIlib_send_instance_type@@A ; NDISender
	push	eax
	call	DWORD PTR __imp__NDIlib_send_destroy
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 157  :     NDISender = nullptr;

	mov	DWORD PTR ?NDISender@@3PAUNDIlib_send_instance_type@@A, 0 ; NDISender
$LN1@DeleteSend:

; 158  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeleteSender ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Windows\NDI.cpp
;	COMDAT _CreateSender
_TEXT	SEGMENT
_CreateSender PROC					; COMDAT

; 148  : extern "C" DLL_EXPORT int CreateSender() {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9A1ABAE0_NDI@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 149  :     if (NDISender) return 0;

	cmp	DWORD PTR ?NDISender@@3PAUNDIlib_send_instance_type@@A, 0 ; NDISender
	je	SHORT $LN2@CreateSend
	xor	eax, eax
	jmp	SHORT $LN1@CreateSend
$LN2@CreateSend:

; 150  :     if (!(NDISender = NDIlib_send_create(nullptr))) return 0;

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__NDIlib_send_create
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?NDISender@@3PAUNDIlib_send_instance_type@@A, eax ; NDISender
	cmp	DWORD PTR ?NDISender@@3PAUNDIlib_send_instance_type@@A, 0 ; NDISender
	jne	SHORT $LN3@CreateSend
	xor	eax, eax
	jmp	SHORT $LN1@CreateSend
$LN3@CreateSend:

; 151  :     return 1;

	mov	eax, 1
$LN1@CreateSend:

; 152  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CreateSender ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Windows\NDI.cpp
;	COMDAT _ReceiveFrame
_TEXT	SEGMENT
tv94 = -372						; size = 4
_imageData$1 = -172					; size = 4
_memblock$2 = -160					; size = 4
_dataSize$3 = -148					; size = 4
_dataOffset$4 = -136					; size = 4
_audio$ = -124						; size = 48
_video$ = -68						; size = 64
_outputImageID$ = 8					; size = 4
_outputSoundID$ = 12					; size = 4
_timeout$ = 16						; size = 4
_ReceiveFrame PROC					; COMDAT

; 105  : extern "C" DLL_EXPORT void ReceiveFrame(int outputImageID, int outputSoundID, int timeout) {

	push	ebp
	mov	ebp, esp
	sub	esp, 372				; 00000174H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-180]
	mov	ecx, 45					; 0000002dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9A1ABAE0_NDI@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 106  :     if (!NDIReceiver) return;

	cmp	DWORD PTR ?NDIReceiver@@3PAUNDIlib_recv_instance_type@@A, 0 ; NDIReceiver
	jne	SHORT $LN4@ReceiveFra
	jmp	$LN1@ReceiveFra
$LN4@ReceiveFra:

; 107  : 
; 108  :     NDIlib_video_frame_v2_t video;

	push	0
	push	0
	push	0
	push	0
	push	0
	push	2147483647				; 7fffffffH
	push	-1
	push	1
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	1001					; 000003e9H
	push	30000					; 00007530H
	push	1498831189				; 59565955H
	push	0
	push	0
	lea	ecx, DWORD PTR _video$[ebp]
	call	??0NDIlib_video_frame_v2_t@@QAE@HHW4NDIlib_FourCC_video_type_e@@HHMW4NDIlib_frame_format_type_e@@_JPAEHPBD2@Z ; NDIlib_video_frame_v2_t::NDIlib_video_frame_v2_t

; 109  :     NDIlib_audio_frame_v3_t audio;

	push	0
	push	0
	push	0
	push	0
	push	0
	push	1884572742				; 70544c46H
	push	2147483647				; 7fffffffH
	push	-1
	push	0
	push	2
	push	48000					; 0000bb80H
	lea	ecx, DWORD PTR _audio$[ebp]
	call	??0NDIlib_audio_frame_v3_t@@QAE@HHH_JW4NDIlib_FourCC_audio_type_e@@PAEHPBD0@Z ; NDIlib_audio_frame_v3_t::NDIlib_audio_frame_v3_t

; 110  : 
; 111  :     switch (NDIlib_recv_capture_v3(NDIReceiver, &video, &audio, nullptr, timeout)) {

	mov	esi, esp
	mov	eax, DWORD PTR _timeout$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _audio$[ebp]
	push	ecx
	lea	edx, DWORD PTR _video$[ebp]
	push	edx
	mov	eax, DWORD PTR ?NDIReceiver@@3PAUNDIlib_recv_instance_type@@A ; NDIReceiver
	push	eax
	call	DWORD PTR __imp__NDIlib_recv_capture_v3
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv94[ebp], eax
	cmp	DWORD PTR tv94[ebp], 1
	je	SHORT $LN5@ReceiveFra
	cmp	DWORD PTR tv94[ebp], 2
	je	$LN8@ReceiveFra
	cmp	DWORD PTR tv94[ebp], 4
	je	$LN9@ReceiveFra
	jmp	$LN2@ReceiveFra
$LN5@ReceiveFra:

; 112  :     case NDIlib_frame_type_video:
; 113  :         // This plugin currently only accepts RGBA-format
; 114  :         if (video.FourCC == NDIlib_FourCC_type_RGBA) {

	cmp	DWORD PTR _video$[ebp+8], 1094862674	; 41424752H
	jne	$LN6@ReceiveFra

; 115  :             // Create memblock for AGK image (12 bytes for metadata)
; 116  :             int dataOffset = 12;

	mov	DWORD PTR _dataOffset$4[ebp], 12	; 0000000cH

; 117  :             int dataSize = 4 * video.xres * video.yres;

	mov	eax, DWORD PTR _video$[ebp]
	shl	eax, 2
	imul	eax, DWORD PTR _video$[ebp+4]
	mov	DWORD PTR _dataSize$3[ebp], eax

; 118  :             int memblock = agk::CreateMemblock(dataOffset + dataSize);

	mov	eax, DWORD PTR _dataOffset$4[ebp]
	add	eax, DWORD PTR _dataSize$3[ebp]
	push	eax
	call	?CreateMemblock@agk@@SAII@Z		; agk::CreateMemblock
	add	esp, 4
	mov	DWORD PTR _memblock$2[ebp], eax

; 119  :             agk::SetMemblockInt(memblock, 0, video.xres);

	mov	eax, DWORD PTR _video$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _memblock$2[ebp]
	push	ecx
	call	?SetMemblockInt@agk@@SAXIIH@Z		; agk::SetMemblockInt
	add	esp, 12					; 0000000cH

; 120  :             agk::SetMemblockInt(memblock, 4, video.yres);

	mov	eax, DWORD PTR _video$[ebp+4]
	push	eax
	push	4
	mov	ecx, DWORD PTR _memblock$2[ebp]
	push	ecx
	call	?SetMemblockInt@agk@@SAXIIH@Z		; agk::SetMemblockInt
	add	esp, 12					; 0000000cH

; 121  :             agk::SetMemblockInt(memblock, 8, 32); // AGK only deals with 32-bit image data

	push	32					; 00000020H
	push	8
	mov	eax, DWORD PTR _memblock$2[ebp]
	push	eax
	call	?SetMemblockInt@agk@@SAXIIH@Z		; agk::SetMemblockInt
	add	esp, 12					; 0000000cH

; 122  : 
; 123  :             // Copy NDI image data to AGK image data
; 124  :             uint8_t* imageData = agk::GetMemblockPtr(memblock) + dataOffset;

	mov	eax, DWORD PTR _memblock$2[ebp]
	push	eax
	call	?GetMemblockPtr@agk@@SAPAEI@Z		; agk::GetMemblockPtr
	add	esp, 4
	add	eax, DWORD PTR _dataOffset$4[ebp]
	mov	DWORD PTR _imageData$1[ebp], eax

; 125  :             memcpy(imageData, video.p_data, dataSize);

	mov	eax, DWORD PTR _dataSize$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _video$[ebp+40]
	push	ecx
	mov	edx, DWORD PTR _imageData$1[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 126  : 
; 127  :             // Create new AGK image from received image data
; 128  :             agk::CreateImageFromMemblock(outputImageID, memblock);

	mov	eax, DWORD PTR _memblock$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _outputImageID$[ebp]
	push	ecx
	call	?CreateImageFromMemblock@agk@@SAXII@Z	; agk::CreateImageFromMemblock
	add	esp, 8

; 129  :             
; 130  :             agk::DeleteMemblock(memblock);

	mov	eax, DWORD PTR _memblock$2[ebp]
	push	eax
	call	?DeleteMemblock@agk@@SAXI@Z		; agk::DeleteMemblock
	add	esp, 4

; 131  :         }

	jmp	SHORT $LN7@ReceiveFra
$LN6@ReceiveFra:

; 132  :         else agk::Print("Incompatible data received");

	push	OFFSET ??_C@_0BL@DBAPPLAG@Incompatible?5data?5received@
	call	?Print@agk@@SAXPBD@Z			; agk::Print
	add	esp, 4
$LN7@ReceiveFra:

; 133  : 
; 134  :         NDIlib_recv_free_video_v2(NDIReceiver, &video);

	mov	esi, esp
	lea	eax, DWORD PTR _video$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?NDIReceiver@@3PAUNDIlib_recv_instance_type@@A ; NDIReceiver
	push	ecx
	call	DWORD PTR __imp__NDIlib_recv_free_video_v2
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 135  :         break;

	jmp	SHORT $LN2@ReceiveFra
$LN8@ReceiveFra:

; 136  :     case NDIlib_frame_type_audio:
; 137  :         // Process audio here
; 138  :         NDIlib_recv_free_audio_v3(NDIReceiver, &audio);

	mov	esi, esp
	lea	eax, DWORD PTR _audio$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?NDIReceiver@@3PAUNDIlib_recv_instance_type@@A ; NDIReceiver
	push	ecx
	call	DWORD PTR __imp__NDIlib_recv_free_audio_v3
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 139  :         break;

	jmp	SHORT $LN2@ReceiveFra
$LN9@ReceiveFra:

; 140  :     case NDIlib_frame_type_error:
; 141  :         agk::Print("Trying to receive data produced an unknown error");

	push	OFFSET ??_C@_0DB@KBMCLNJB@Trying?5to?5receive?5data?5produced@
	call	?Print@agk@@SAXPBD@Z			; agk::Print
	add	esp, 4
$LN2@ReceiveFra:

; 142  :         break;
; 143  :     }
; 144  : 
; 145  :     agk::Sync();

	call	?Sync@agk@@SAXXZ			; agk::Sync
$LN1@ReceiveFra:

; 146  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@ReceiveFra
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 372				; 00000174H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@ReceiveFra:
	DD	2
	DD	$LN13@ReceiveFra
$LN13@ReceiveFra:
	DD	-68					; ffffffbcH
	DD	64					; 00000040H
	DD	$LN11@ReceiveFra
	DD	-124					; ffffff84H
	DD	48					; 00000030H
	DD	$LN12@ReceiveFra
$LN12@ReceiveFra:
	DB	97					; 00000061H
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	0
$LN11@ReceiveFra:
	DB	118					; 00000076H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	0
_ReceiveFrame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Windows\NDI.cpp
;	COMDAT _ConnectReceiver
_TEXT	SEGMENT
_source$1 = -24						; size = 8
_i$2 = -8						; size = 4
_senderName$ = 8					; size = 4
_ConnectReceiver PROC					; COMDAT

; 89   : extern "C" DLL_EXPORT int ConnectReceiver(const char* senderName) {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-28]
	mov	ecx, 7
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9A1ABAE0_NDI@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 90   :     if (!NDIReceiver) return 0;

	cmp	DWORD PTR ?NDIReceiver@@3PAUNDIlib_recv_instance_type@@A, 0 ; NDIReceiver
	jne	SHORT $LN5@ConnectRec
	xor	eax, eax
	jmp	SHORT $LN1@ConnectRec
$LN5@ConnectRec:

; 91   : 
; 92   :     // Only connect to senderName if it's the name of a discovered source
; 93   :     for (uint32_t i = 0; i < sourceCount; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ConnectRec
$LN2@ConnectRec:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@ConnectRec:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR ?sourceCount@@3IA	; sourceCount
	jae	SHORT $LN3@ConnectRec

; 94   :         if (!strcmp(sourcesArray[i], senderName)) {

	mov	eax, DWORD PTR _senderName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR ?sourcesArray@@3PAPADA	; sourcesArray
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@ConnectRec

; 95   :             NDIlib_source_t source;

	push	0
	push	0
	lea	ecx, DWORD PTR _source$1[ebp]
	call	??0NDIlib_source_t@@QAE@PBD0@Z		; NDIlib_source_t::NDIlib_source_t

; 96   :             source.p_ndi_name = senderName;

	mov	eax, DWORD PTR _senderName$[ebp]
	mov	DWORD PTR _source$1[ebp], eax

; 97   :             NDIlib_recv_connect(NDIReceiver, &source);

	mov	esi, esp
	lea	eax, DWORD PTR _source$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?NDIReceiver@@3PAUNDIlib_recv_instance_type@@A ; NDIReceiver
	push	ecx
	call	DWORD PTR __imp__NDIlib_recv_connect
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 98   :             return 1;

	mov	eax, 1
	jmp	SHORT $LN1@ConnectRec
$LN6@ConnectRec:

; 99   :         }
; 100  :     }

	jmp	SHORT $LN2@ConnectRec
$LN3@ConnectRec:

; 101  : 
; 102  :     return 0;

	xor	eax, eax
$LN1@ConnectRec:

; 103  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ConnectRec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@ConnectRec:
	DD	1
	DD	$LN9@ConnectRec
$LN9@ConnectRec:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN8@ConnectRec
$LN8@ConnectRec:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
_ConnectReceiver ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Windows\NDI.cpp
;	COMDAT _DeleteReceiver
_TEXT	SEGMENT
_DeleteReceiver PROC					; COMDAT

; 83   : extern "C" DLL_EXPORT void DeleteReceiver() {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9A1ABAE0_NDI@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 84   :     if (!NDIReceiver) return;

	cmp	DWORD PTR ?NDIReceiver@@3PAUNDIlib_recv_instance_type@@A, 0 ; NDIReceiver
	jne	SHORT $LN2@DeleteRece
	jmp	SHORT $LN1@DeleteRece
$LN2@DeleteRece:

; 85   :     NDIlib_recv_destroy(NDIReceiver);

	mov	esi, esp
	mov	eax, DWORD PTR ?NDIReceiver@@3PAUNDIlib_recv_instance_type@@A ; NDIReceiver
	push	eax
	call	DWORD PTR __imp__NDIlib_recv_destroy
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 86   :     NDIReceiver = nullptr;

	mov	DWORD PTR ?NDIReceiver@@3PAUNDIlib_recv_instance_type@@A, 0 ; NDIReceiver
$LN1@DeleteRece:

; 87   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeleteReceiver ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Windows\NDI.cpp
;	COMDAT _CreateReceiver
_TEXT	SEGMENT
$T1 = -236						; size = 8
_settings$ = -28					; size = 24
_CreateReceiver PROC					; COMDAT

; 75   : extern "C" DLL_EXPORT int CreateReceiver() {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9A1ABAE0_NDI@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 76   :     if (NDIReceiver) return 0;

	cmp	DWORD PTR ?NDIReceiver@@3PAUNDIlib_recv_instance_type@@A, 0 ; NDIReceiver
	je	SHORT $LN2@CreateRece
	xor	eax, eax
	jmp	SHORT $LN1@CreateRece
$LN2@CreateRece:

; 77   :     NDIlib_recv_create_v3_t settings;

	push	0
	push	1
	push	100					; 00000064H
	push	1
	push	0
	push	0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0NDIlib_source_t@@QAE@PBD0@Z		; NDIlib_source_t::NDIlib_source_t
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	ecx, DWORD PTR _settings$[ebp]
	call	??0NDIlib_recv_create_v3_t@@QAE@UNDIlib_source_t@@W4NDIlib_recv_color_format_e@@W4NDIlib_recv_bandwidth_e@@_NPBD@Z ; NDIlib_recv_create_v3_t::NDIlib_recv_create_v3_t

; 78   :     settings.color_format = NDIlib_recv_color_format_RGBX_RGBA;

	mov	DWORD PTR _settings$[ebp+8], 2

; 79   :     if (!(NDIReceiver = NDIlib_recv_create_v3(&settings))) return 0;

	mov	esi, esp
	lea	eax, DWORD PTR _settings$[ebp]
	push	eax
	call	DWORD PTR __imp__NDIlib_recv_create_v3
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?NDIReceiver@@3PAUNDIlib_recv_instance_type@@A, eax ; NDIReceiver
	cmp	DWORD PTR ?NDIReceiver@@3PAUNDIlib_recv_instance_type@@A, 0 ; NDIReceiver
	jne	SHORT $LN3@CreateRece
	xor	eax, eax
	jmp	SHORT $LN1@CreateRece
$LN3@CreateRece:

; 80   :     return 1;

	mov	eax, 1
$LN1@CreateRece:

; 81   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@CreateRece
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@CreateRece:
	DD	1
	DD	$LN6@CreateRece
$LN6@CreateRece:
	DD	-28					; ffffffe4H
	DD	24					; 00000018H
	DD	$LN5@CreateRece
$LN5@CreateRece:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
_CreateReceiver ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Windows\NDI.cpp
;	COMDAT _FindSources
_TEXT	SEGMENT
_i$1 = -80						; size = 4
_i$2 = -68						; size = 4
_outputString$ = -56					; size = 4
_stringBytes$3 = -44					; size = 4
_i$4 = -32						; size = 4
_totalStringBytes$ = -20				; size = 4
_sources$ = -8						; size = 4
_timeout$ = 8						; size = 4
_FindSources PROC					; COMDAT

; 38   : extern "C" DLL_EXPORT const char* FindSources(int timeout) {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9A1ABAE0_NDI@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 39   :     if (!NDIFinder) return "";

	cmp	DWORD PTR ?NDIFinder@@3PAUNDIlib_find_instance_type@@A, 0 ; NDIFinder
	jne	SHORT $LN11@FindSource
	mov	eax, OFFSET ??_C@_00CNPNBAHC@@
	jmp	$LN1@FindSource
$LN11@FindSource:

; 40   : 
; 41   :     // Wait specified timeout and then get currently discovered sources
; 42   :     NDIlib_find_wait_for_sources(NDIFinder, timeout);

	mov	esi, esp
	mov	eax, DWORD PTR _timeout$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?NDIFinder@@3PAUNDIlib_find_instance_type@@A ; NDIFinder
	push	ecx
	call	DWORD PTR __imp__NDIlib_find_wait_for_sources
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 43   :     const NDIlib_source_t* sources = NDIlib_find_get_current_sources(NDIFinder, &sourceCount);

	mov	esi, esp
	push	OFFSET ?sourceCount@@3IA		; sourceCount
	mov	eax, DWORD PTR ?NDIFinder@@3PAUNDIlib_find_instance_type@@A ; NDIFinder
	push	eax
	call	DWORD PTR __imp__NDIlib_find_get_current_sources
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _sources$[ebp], eax

; 44   : 
; 45   :     // Doing this once more seems to help
; 46   :     if (NDIlib_find_wait_for_sources(NDIFinder, timeout))

	mov	esi, esp
	mov	eax, DWORD PTR _timeout$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?NDIFinder@@3PAUNDIlib_find_instance_type@@A ; NDIFinder
	push	ecx
	call	DWORD PTR __imp__NDIlib_find_wait_for_sources
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN12@FindSource

; 47   :         sources = NDIlib_find_get_current_sources(NDIFinder, &sourceCount);

	mov	esi, esp
	push	OFFSET ?sourceCount@@3IA		; sourceCount
	mov	eax, DWORD PTR ?NDIFinder@@3PAUNDIlib_find_instance_type@@A ; NDIFinder
	push	eax
	call	DWORD PTR __imp__NDIlib_find_get_current_sources
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _sources$[ebp], eax
$LN12@FindSource:

; 48   : 
; 49   :     // Allocate string array for storing source names
; 50   :     sourcesArray = (char**)malloc(sourceCount * sizeof(char*));

	mov	eax, DWORD PTR ?sourceCount@@3IA	; sourceCount
	shl	eax, 2
	push	eax
	call	_malloc
	add	esp, 4
	mov	DWORD PTR ?sourcesArray@@3PAPADA, eax	; sourcesArray

; 51   :     if (!sourcesArray) return "";

	cmp	DWORD PTR ?sourcesArray@@3PAPADA, 0	; sourcesArray
	jne	SHORT $LN13@FindSource
	mov	eax, OFFSET ??_C@_00CNPNBAHC@@
	jmp	$LN1@FindSource
$LN13@FindSource:

; 52   : 
; 53   :     // Allocate memory for strings
; 54   :     int totalStringBytes = 0;

	mov	DWORD PTR _totalStringBytes$[ebp], 0

; 55   :     for (uint32_t i = 0; i < sourceCount; i++) {

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN4@FindSource
$LN2@FindSource:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN4@FindSource:
	mov	eax, DWORD PTR _i$4[ebp]
	cmp	eax, DWORD PTR ?sourceCount@@3IA	; sourceCount
	jae	$LN3@FindSource

; 56   :         int stringBytes = strlen(sources[i].p_ndi_name) + 2; // +2 for newline and null-byte

	mov	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR _sources$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, 2
	mov	DWORD PTR _stringBytes$3[ebp], eax

; 57   :         totalStringBytes += stringBytes;

	mov	eax, DWORD PTR _totalStringBytes$[ebp]
	add	eax, DWORD PTR _stringBytes$3[ebp]
	mov	DWORD PTR _totalStringBytes$[ebp], eax

; 58   :         sourcesArray[i] = (char*)malloc(stringBytes);

	mov	eax, DWORD PTR _stringBytes$3[ebp]
	push	eax
	call	_malloc
	add	esp, 4
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR ?sourcesArray@@3PAPADA	; sourcesArray
	mov	DWORD PTR [edx+ecx*4], eax

; 59   :         strcpy(sourcesArray[i], sources[i].p_ndi_name);

	mov	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR _sources$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR ?sourcesArray@@3PAPADA	; sourcesArray
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_strcpy
	add	esp, 8

; 60   :         sourcesArray[i][stringBytes - 2] = '\n';

	mov	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR ?sourcesArray@@3PAPADA	; sourcesArray
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _stringBytes$3[ebp]
	mov	BYTE PTR [edx+eax-2], 10		; 0000000aH

; 61   :         sourcesArray[i][stringBytes - 1] = '\0';

	mov	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR ?sourcesArray@@3PAPADA	; sourcesArray
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _stringBytes$3[ebp]
	mov	BYTE PTR [edx+eax-1], 0

; 62   :     }

	jmp	$LN2@FindSource
$LN3@FindSource:

; 63   : 
; 64   :     // Allocate AGK-controlled output string and concatenate everything into it
; 65   :     char* outputString = agk::CreateString(totalStringBytes);

	mov	eax, DWORD PTR _totalStringBytes$[ebp]
	push	eax
	call	?CreateString@agk@@SAPADI@Z		; agk::CreateString
	add	esp, 4
	mov	DWORD PTR _outputString$[ebp], eax

; 66   :     outputString[0] = '\0';

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _outputString$[ebp]
	mov	BYTE PTR [edx+ecx], 0

; 67   :     for (uint32_t i = 0; i < sourceCount; i++) strcat(outputString, sourcesArray[i]);

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN7@FindSource
$LN5@FindSource:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN7@FindSource:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR ?sourceCount@@3IA	; sourceCount
	jae	SHORT $LN6@FindSource
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR ?sourcesArray@@3PAPADA	; sourcesArray
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _outputString$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
	jmp	SHORT $LN5@FindSource
$LN6@FindSource:

; 68   : 
; 69   :     // Remove newline so other functions can check which NDI names were discovered
; 70   :     for (uint32_t i = 0; i < sourceCount; i++) sourcesArray[i][strlen(sourcesArray[i]) - 1] = '\0';

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN10@FindSource
$LN8@FindSource:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN10@FindSource:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR ?sourceCount@@3IA	; sourceCount
	jae	SHORT $LN9@FindSource
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR ?sourcesArray@@3PAPADA	; sourcesArray
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR ?sourcesArray@@3PAPADA	; sourcesArray
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [ecx+eax-1], 0
	jmp	SHORT $LN8@FindSource
$LN9@FindSource:

; 71   : 
; 72   :     return outputString;

	mov	eax, DWORD PTR _outputString$[ebp]
$LN1@FindSource:

; 73   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FindSources ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Windows\NDI.cpp
;	COMDAT _DeleteFinder
_TEXT	SEGMENT
_DeleteFinder PROC					; COMDAT

; 32   : extern "C" DLL_EXPORT void DeleteFinder() {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9A1ABAE0_NDI@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 33   :     if (!NDIFinder) return;

	cmp	DWORD PTR ?NDIFinder@@3PAUNDIlib_find_instance_type@@A, 0 ; NDIFinder
	jne	SHORT $LN2@DeleteFind
	jmp	SHORT $LN1@DeleteFind
$LN2@DeleteFind:

; 34   :     NDIlib_find_destroy(NDIFinder);

	mov	esi, esp
	mov	eax, DWORD PTR ?NDIFinder@@3PAUNDIlib_find_instance_type@@A ; NDIFinder
	push	eax
	call	DWORD PTR __imp__NDIlib_find_destroy
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 35   :     NDIFinder = nullptr;

	mov	DWORD PTR ?NDIFinder@@3PAUNDIlib_find_instance_type@@A, 0 ; NDIFinder
$LN1@DeleteFind:

; 36   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeleteFinder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Windows\NDI.cpp
;	COMDAT _CreateFinder
_TEXT	SEGMENT
_CreateFinder PROC					; COMDAT

; 26   : extern "C" DLL_EXPORT int CreateFinder() {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9A1ABAE0_NDI@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 27   :     if (NDIFinder) return 0;

	cmp	DWORD PTR ?NDIFinder@@3PAUNDIlib_find_instance_type@@A, 0 ; NDIFinder
	je	SHORT $LN2@CreateFind
	xor	eax, eax
	jmp	SHORT $LN1@CreateFind
$LN2@CreateFind:

; 28   :     if (!(NDIFinder = NDIlib_find_create_v2(nullptr))) return 0;

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__NDIlib_find_create_v2
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?NDIFinder@@3PAUNDIlib_find_instance_type@@A, eax ; NDIFinder
	cmp	DWORD PTR ?NDIFinder@@3PAUNDIlib_find_instance_type@@A, 0 ; NDIFinder
	jne	SHORT $LN3@CreateFind
	xor	eax, eax
	jmp	SHORT $LN1@CreateFind
$LN3@CreateFind:

; 29   :     return 1;

	mov	eax, 1
$LN1@CreateFind:

; 30   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CreateFinder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Windows\NDI.cpp
;	COMDAT _Uninitialize
_TEXT	SEGMENT
_Uninitialize PROC					; COMDAT

; 22   : extern "C" DLL_EXPORT void Uninitialize() {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9A1ABAE0_NDI@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 23   :     NDIlib_destroy();

	mov	esi, esp
	call	DWORD PTR __imp__NDIlib_destroy
	cmp	esi, esp
	call	__RTC_CheckEsp

; 24   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Uninitialize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Windows\NDI.cpp
;	COMDAT _Initialize
_TEXT	SEGMENT
_Initialize PROC					; COMDAT

; 17   : extern "C" DLL_EXPORT int Initialize() {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9A1ABAE0_NDI@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 18   :     if (!NDIlib_initialize()) return 0;

	mov	esi, esp
	call	DWORD PTR __imp__NDIlib_initialize
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Initialize
	xor	eax, eax
	jmp	SHORT $LN1@Initialize
$LN2@Initialize:

; 19   :     return 1;

	mov	eax, 1
$LN1@Initialize:

; 20   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Initialize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Include\Processing.NDI.Lib.cplusplus.h
;	COMDAT ??0NDIlib_recv_create_v3_t@@QAE@UNDIlib_source_t@@W4NDIlib_recv_color_format_e@@W4NDIlib_recv_bandwidth_e@@_NPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_source_to_connect_to_$ = 8				; size = 8
_color_format_$ = 16					; size = 4
_bandwidth_$ = 20					; size = 4
_allow_video_fields_$ = 24				; size = 1
_p_ndi_name_$ = 28					; size = 4
??0NDIlib_recv_create_v3_t@@QAE@UNDIlib_source_t@@W4NDIlib_recv_color_format_e@@W4NDIlib_recv_bandwidth_e@@_NPBD@Z PROC ; NDIlib_recv_create_v3_t::NDIlib_recv_create_v3_t, COMDAT
; _this$ = ecx

; 85   : 	: source_to_connect_to(source_to_connect_to_), color_format(color_format_), bandwidth(bandwidth_), allow_video_fields(allow_video_fields_), p_ndi_recv_name(p_ndi_name_) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6DA9BDA_Processing@NDI@Lib@cplusplus@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _source_to_connect_to_$[ebp]
	mov	edx, DWORD PTR _source_to_connect_to_$[ebp+4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _color_format_$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _bandwidth_$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _allow_video_fields_$[ebp]
	mov	BYTE PTR [eax+16], cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p_ndi_name_$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0NDIlib_recv_create_v3_t@@QAE@UNDIlib_source_t@@W4NDIlib_recv_color_format_e@@W4NDIlib_recv_bandwidth_e@@_NPBD@Z ENDP ; NDIlib_recv_create_v3_t::NDIlib_recv_create_v3_t
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Include\Processing.NDI.Lib.cplusplus.h
;	COMDAT ??0NDIlib_audio_frame_v3_t@@QAE@HHH_JW4NDIlib_FourCC_audio_type_e@@PAEHPBD0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_sample_rate_$ = 8					; size = 4
_no_channels_$ = 12					; size = 4
_no_samples_$ = 16					; size = 4
_timecode_$ = 20					; size = 8
_FourCC_$ = 28						; size = 4
_p_data_$ = 32						; size = 4
_channel_stride_in_bytes_$ = 36				; size = 4
_p_metadata_$ = 40					; size = 4
_timestamp_$ = 44					; size = 8
??0NDIlib_audio_frame_v3_t@@QAE@HHH_JW4NDIlib_FourCC_audio_type_e@@PAEHPBD0@Z PROC ; NDIlib_audio_frame_v3_t::NDIlib_audio_frame_v3_t, COMDAT
; _this$ = ecx

; 60   : 	  p_metadata(p_metadata_), timestamp(timestamp_) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6DA9BDA_Processing@NDI@Lib@cplusplus@h
	call	@__CheckForDebuggerJustMyCode@4

; 58   : 	: sample_rate(sample_rate_), no_channels(no_channels_), no_samples(no_samples_), timecode(timecode_),

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sample_rate_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _no_channels_$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _no_samples_$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _timecode_$[ebp]
	mov	edx, DWORD PTR _timecode_$[ebp+4]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx

; 59   : 	  FourCC(FourCC_), p_data(p_data_), channel_stride_in_bytes(channel_stride_in_bytes_),

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _FourCC_$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p_data_$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _channel_stride_in_bytes_$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 60   : 	  p_metadata(p_metadata_), timestamp(timestamp_) {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p_metadata_$[ebp]
	mov	DWORD PTR [eax+36], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _timestamp_$[ebp]
	mov	edx, DWORD PTR _timestamp_$[ebp+4]
	mov	DWORD PTR [eax+40], ecx
	mov	DWORD PTR [eax+44], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	44					; 0000002cH
??0NDIlib_audio_frame_v3_t@@QAE@HHH_JW4NDIlib_FourCC_audio_type_e@@PAEHPBD0@Z ENDP ; NDIlib_audio_frame_v3_t::NDIlib_audio_frame_v3_t
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Include\Processing.NDI.Lib.cplusplus.h
;	COMDAT ??0NDIlib_video_frame_v2_t@@QAE@HHW4NDIlib_FourCC_video_type_e@@HHMW4NDIlib_frame_format_type_e@@_JPAEHPBD2@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xres_$ = 8						; size = 4
_yres_$ = 12						; size = 4
_FourCC_$ = 16						; size = 4
_frame_rate_N_$ = 20					; size = 4
_frame_rate_D_$ = 24					; size = 4
_picture_aspect_ratio_$ = 28				; size = 4
_frame_format_type_$ = 32				; size = 4
_timecode_$ = 36					; size = 8
_p_data_$ = 44						; size = 4
_line_stride_in_bytes_$ = 48				; size = 4
_p_metadata_$ = 52					; size = 4
_timestamp_$ = 56					; size = 8
??0NDIlib_video_frame_v2_t@@QAE@HHW4NDIlib_FourCC_video_type_e@@HHMW4NDIlib_frame_format_type_e@@_JPAEHPBD2@Z PROC ; NDIlib_video_frame_v2_t::NDIlib_video_frame_v2_t, COMDAT
; _this$ = ecx

; 48   : 	  timecode(timecode_), p_data(p_data_), line_stride_in_bytes(line_stride_in_bytes_), p_metadata(p_metadata_), timestamp(timestamp_) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6DA9BDA_Processing@NDI@Lib@cplusplus@h
	call	@__CheckForDebuggerJustMyCode@4

; 46   : 	: xres(xres_), yres(yres_), FourCC(FourCC_), frame_rate_N(frame_rate_N_), frame_rate_D(frame_rate_D_),

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _xres_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _yres_$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _FourCC_$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _frame_rate_N_$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _frame_rate_D_$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 47   : 	  picture_aspect_ratio(picture_aspect_ratio_), frame_format_type(frame_format_type_),

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _picture_aspect_ratio_$[ebp]
	movss	DWORD PTR [eax+20], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _frame_format_type_$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 48   : 	  timecode(timecode_), p_data(p_data_), line_stride_in_bytes(line_stride_in_bytes_), p_metadata(p_metadata_), timestamp(timestamp_) {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _timecode_$[ebp]
	mov	edx, DWORD PTR _timecode_$[ebp+4]
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p_data_$[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _line_stride_in_bytes_$[ebp]
	mov	DWORD PTR [eax+44], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p_metadata_$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _timestamp_$[ebp]
	mov	edx, DWORD PTR _timestamp_$[ebp+4]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	56					; 00000038H
??0NDIlib_video_frame_v2_t@@QAE@HHW4NDIlib_FourCC_video_type_e@@HHMW4NDIlib_frame_format_type_e@@_JPAEHPBD2@Z ENDP ; NDIlib_video_frame_v2_t::NDIlib_video_frame_v2_t
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\Include\Processing.NDI.Lib.cplusplus.h
;	COMDAT ??0NDIlib_source_t@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_p_ndi_name_$ = 8					; size = 4
_p_url_address_$ = 12					; size = 4
??0NDIlib_source_t@@QAE@PBD0@Z PROC			; NDIlib_source_t::NDIlib_source_t, COMDAT
; _this$ = ecx

; 41   : 	: p_ndi_name(p_ndi_name_), p_url_address(p_url_address_) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6DA9BDA_Processing@NDI@Lib@cplusplus@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p_ndi_name_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p_url_address_$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0NDIlib_source_t@@QAE@PBD0@Z ENDP			; NDIlib_source_t::NDIlib_source_t
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\AGKLibraryCommands.h
;	COMDAT ?GetMemblockPtr@agk@@SAPAEI@Z
_TEXT	SEGMENT
_memID$ = 8						; size = 4
?GetMemblockPtr@agk@@SAPAEI@Z PROC			; agk::GetMemblockPtr, COMDAT

; 3880 : 		static inline unsigned char* GetMemblockPtr( unsigned int memID ) { return AGKCommand1832( memID ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __E5B9A0F7_AGKLibraryCommands@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, esp
	mov	eax, DWORD PTR _memID$[ebp]
	push	eax
	call	DWORD PTR ?AGKCommand1832@@3P6APAEI@ZA	; AGKCommand1832
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMemblockPtr@agk@@SAPAEI@Z ENDP			; agk::GetMemblockPtr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\AGKLibraryCommands.h
;	COMDAT ?CreateImageFromMemblock@agk@@SAXII@Z
_TEXT	SEGMENT
_imageID$ = 8						; size = 4
_memID$ = 12						; size = 4
?CreateImageFromMemblock@agk@@SAXII@Z PROC		; agk::CreateImageFromMemblock, COMDAT

; 3236 : 		static inline void CreateImageFromMemblock( unsigned int imageID, unsigned int memID ) { AGKCommand1188( imageID, memID ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __E5B9A0F7_AGKLibraryCommands@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, esp
	mov	eax, DWORD PTR _memID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _imageID$[ebp]
	push	ecx
	call	DWORD PTR ?AGKCommand1188@@3P6AXII@ZA	; AGKCommand1188
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateImageFromMemblock@agk@@SAXII@Z ENDP		; agk::CreateImageFromMemblock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\AGKLibraryCommands.h
;	COMDAT ?CreateMemblockFromImage@agk@@SAII@Z
_TEXT	SEGMENT
_imageID$ = 8						; size = 4
?CreateMemblockFromImage@agk@@SAII@Z PROC		; agk::CreateMemblockFromImage, COMDAT

; 3235 : 		static inline unsigned int CreateMemblockFromImage( unsigned int imageID ) { return AGKCommand1187( imageID ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __E5B9A0F7_AGKLibraryCommands@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, esp
	mov	eax, DWORD PTR _imageID$[ebp]
	push	eax
	call	DWORD PTR ?AGKCommand1187@@3P6AII@ZA	; AGKCommand1187
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateMemblockFromImage@agk@@SAII@Z ENDP		; agk::CreateMemblockFromImage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\AGKLibraryCommands.h
;	COMDAT ?SetMemblockInt@agk@@SAXIIH@Z
_TEXT	SEGMENT
_memID$ = 8						; size = 4
_offset$ = 12						; size = 4
_value$ = 16						; size = 4
?SetMemblockInt@agk@@SAXIIH@Z PROC			; agk::SetMemblockInt, COMDAT

; 3231 : 		static inline void SetMemblockInt( unsigned int memID, unsigned int offset, int value ) { AGKCommand1183( memID, offset, value ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __E5B9A0F7_AGKLibraryCommands@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, esp
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memID$[ebp]
	push	edx
	call	DWORD PTR ?AGKCommand1183@@3P6AXIIH@ZA	; AGKCommand1183
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SetMemblockInt@agk@@SAXIIH@Z ENDP			; agk::SetMemblockInt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\AGKLibraryCommands.h
;	COMDAT ?GetMemblockSize@agk@@SAHI@Z
_TEXT	SEGMENT
_memID$ = 8						; size = 4
?GetMemblockSize@agk@@SAHI@Z PROC			; agk::GetMemblockSize, COMDAT

; 3221 : 		static inline int GetMemblockSize( unsigned int memID ) { return AGKCommand1173( memID ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __E5B9A0F7_AGKLibraryCommands@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, esp
	mov	eax, DWORD PTR _memID$[ebp]
	push	eax
	call	DWORD PTR ?AGKCommand1173@@3P6AHI@ZA	; AGKCommand1173
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMemblockSize@agk@@SAHI@Z ENDP			; agk::GetMemblockSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\AGKLibraryCommands.h
;	COMDAT ?DeleteMemblock@agk@@SAXI@Z
_TEXT	SEGMENT
_memID$ = 8						; size = 4
?DeleteMemblock@agk@@SAXI@Z PROC			; agk::DeleteMemblock, COMDAT

; 3219 : 		static inline void DeleteMemblock( unsigned int memID ) { AGKCommand1171( memID ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __E5B9A0F7_AGKLibraryCommands@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, esp
	mov	eax, DWORD PTR _memID$[ebp]
	push	eax
	call	DWORD PTR ?AGKCommand1171@@3P6AXI@ZA	; AGKCommand1171
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteMemblock@agk@@SAXI@Z ENDP			; agk::DeleteMemblock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\AGKLibraryCommands.h
;	COMDAT ?CreateMemblock@agk@@SAII@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?CreateMemblock@agk@@SAII@Z PROC			; agk::CreateMemblock, COMDAT

; 3216 : 		static inline unsigned int CreateMemblock( unsigned int size ) { return AGKCommand1168( size ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __E5B9A0F7_AGKLibraryCommands@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	DWORD PTR ?AGKCommand1168@@3P6AII@ZA	; AGKCommand1168
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateMemblock@agk@@SAII@Z ENDP			; agk::CreateMemblock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\AGKLibraryCommands.h
;	COMDAT ?Print@agk@@SAXPBD@Z
_TEXT	SEGMENT
_szString$ = 8						; size = 4
?Print@agk@@SAXPBD@Z PROC				; agk::Print, COMDAT

; 2510 : 		static inline void Print( const char * szString ) { AGKCommand462( szString ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __E5B9A0F7_AGKLibraryCommands@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, esp
	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	call	DWORD PTR ?AGKCommand462@@3P6AXPBD@ZA	; AGKCommand462
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Print@agk@@SAXPBD@Z ENDP				; agk::Print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\AGKLibraryCommands.h
;	COMDAT ?GetImageHeight@agk@@SAMI@Z
_TEXT	SEGMENT
_iImageIndex$ = 8					; size = 4
?GetImageHeight@agk@@SAMI@Z PROC			; agk::GetImageHeight, COMDAT

; 2154 : 		static inline float GetImageHeight( unsigned int iImageIndex ) { return AGKCommand106( iImageIndex ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __E5B9A0F7_AGKLibraryCommands@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, esp
	mov	eax, DWORD PTR _iImageIndex$[ebp]
	push	eax
	call	DWORD PTR ?AGKCommand106@@3P6AMI@ZA	; AGKCommand106
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetImageHeight@agk@@SAMI@Z ENDP			; agk::GetImageHeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\AGKLibraryCommands.h
;	COMDAT ?GetImageWidth@agk@@SAMI@Z
_TEXT	SEGMENT
_iImageIndex$ = 8					; size = 4
?GetImageWidth@agk@@SAMI@Z PROC				; agk::GetImageWidth, COMDAT

; 2153 : 		static inline float GetImageWidth( unsigned int iImageIndex ) { return AGKCommand105( iImageIndex ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __E5B9A0F7_AGKLibraryCommands@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, esp
	mov	eax, DWORD PTR _iImageIndex$[ebp]
	push	eax
	call	DWORD PTR ?AGKCommand105@@3P6AMI@ZA	; AGKCommand105
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetImageWidth@agk@@SAMI@Z ENDP				; agk::GetImageWidth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\AGKLibraryCommands.h
;	COMDAT ?Sync@agk@@SAXXZ
_TEXT	SEGMENT
?Sync@agk@@SAXXZ PROC					; agk::Sync, COMDAT

; 2089 : 		static inline void Sync(  ) { AGKCommand41(  ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __E5B9A0F7_AGKLibraryCommands@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, esp
	call	DWORD PTR ?AGKCommand41@@3P6AXXZA	; AGKCommand41
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Sync@agk@@SAXXZ ENDP					; agk::Sync
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hansi\Downloads\NDI\AGKLibraryCommands.h
;	COMDAT ?CreateString@agk@@SAPADI@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?CreateString@agk@@SAPADI@Z PROC			; agk::CreateString, COMDAT

; 2048 : 		static inline char* CreateString( unsigned int size ) { return AGKCommand0( size ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __E5B9A0F7_AGKLibraryCommands@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	DWORD PTR ?AGKCommand0@@3P6APADI@ZA	; AGKCommand0
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateString@agk@@SAPADI@Z ENDP			; agk::CreateString
_TEXT	ENDS
END
